// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String       @unique
  password          String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  createdQuizzes    Quiz[]       @relation("QuizCreator")
  tests             Test[]
  accessibleQuizzes QuizAccess[]
}

model Quiz {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  questions  Question[]
  creatorId  String       @map("creator_id") @db.ObjectId
  creator    User         @relation("QuizCreator", fields: [creatorId], references: [id])
  tests      Test[]
  sharedWith QuizAccess[]
}

model QuizAccess {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId   String   @map("quiz_id") @db.ObjectId
  quiz     Quiz     @relation(fields: [quizId], references: [id])
  userId   String   @map("user_id") @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  sharedAt DateTime @default(now())

  @@unique([quizId, userId])
}

model Test {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  score       Int?
  status      TestStatus   @default(IN_PROGRESS)
  answers     UserAnswer[]
  quizId      String       @map("quiz_id") @db.ObjectId
  quiz        Quiz         @relation(fields: [quizId], references: [id])
  userId      String       @map("user_id") @db.ObjectId
  user        User         @relation(fields: [userId], references: [id])
  startedAt   DateTime     @default(now())
  completedAt DateTime?
}

type Question {
  id          String   @default(cuid()) @map("_id")
  question    String
  options     Option[]
  explanation String?
}

type Option {
  id      String  @default(cuid()) @map("_id")
  option  String
  correct Boolean
}

type UserAnswer {
  questionId       String
  selectedOptionId String
}

enum TestStatus {
  IN_PROGRESS
  COMPLETED
}
